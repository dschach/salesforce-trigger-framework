/*! `apex` grammar compiled for Highlight.js 11.5.0 */
(() => {
  var e = (() => {
    "use strict";
    function e(a, s, n) {
      return -1 === n ? "" : a.replace(s, (t) => e(a, s, n - 1));
    }
    return (a) => {
      const s = a.regex,
        n = "[\xc0-\u02b8a-zA-Z_$][\xc0-\u02b8a-zA-Z_$0-9]*",
        t = n + e("(?:<" + n + "~~~(?:\\s*,\\s*" + n + "~~~)*>)?", /~~~/g, 2),
        r = {
          keyword: [
            "abstract",
            "assert",
            "break",
            "case",
            "catch",
            "continue",
            "default",
            "do",
            "else",
            "enum",
            "exports",
            "final",
            "finally",
            "for",
            "if",
            "import",
            "instanceof",
            "module",
            "package",
            "private",
            "protected",
            "public",
            "requires",
            "static",
            "switch",
            "synchronized",
            "throws",
            "transient",
            "try",
            "var",
            "virtual",
            "void",
            "while",
          ],
          literal: ["false", "true", "null"],
          type: [
            "string",
            "boolean",
            "long",
            "float",
            "integer",
            "byte",
            "short",
            "double",
            "blob",
            "date",
            "datetime",
            "decimal",
            "id",
            "object",
            "sobject",
            "time",
            "anytype",
            "currency",
            "void",
            "list",
            "set",
            "map",
          ],
          dml: ["insert", "update", "upsert", "delete", "undelete", "merge"],
          sharing: ["with sharing", "without sharing", "inherited sharing"],
          namespace: [
            "ApexPages",
            "AppLauncher",
            "Approval",
            "Auth",
            "Cache",
            "Canvas",
            "ChatterAnswers",
            "CommercePayments",
            "ConnectApi",
            "Database",
            "Datacloud",
            "DataSource",
            "Dom",
            "EventBus",
            "Flow",
            "Functions",
            "KbManagement",
            "LxScheduler",
            "Messaging",
            "Metadata",
            "Pref_center",
            "Process",
            "QuickAction",
            "Reports",
            "Schema",
            "Search",
            "Sfc",
            "Sfdc_Checkout",
            "sfdc_surveys",
            "Site",
            "Support",
            "System",
            "TerritoryMgmt",
            "Test",
            "TxnSecurity",
            "Type",
            "UserProvisioning",
            "VisualEditor",
            "Wave",
          ],
          built_in: ["super", "this", "trigger", "class"],
        },
        i = { className: "meta", begin: "@" + n, contains: [{ begin: /\(/, end: /\)/, contains: ["self"] }] },
        c = { className: "params", begin: /\(/, end: /\)/, keywords: r, relevance: 0, contains: [a.C_BLOCK_COMMENT_MODE], endsParent: !0 },
        l = "\\.([0-9](_*[0-9])*)",
        o = "[0-9a-fA-F](_*[0-9a-fA-F])*",
        b = {
          className: "number",
          variants: [
            {
              begin: `(\\b([0-9](_*[0-9])*)((${l})|\\.)?|(${l}))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\b`,
            },
            { begin: `\\b([0-9](_*[0-9])*)((${l})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
            {
              begin: `(${l})[fFdD]?\\b`,
            },
            { begin: "\\b([0-9](_*[0-9])*)[fFdD]\\b" },
            {
              begin: `\\b0[xX]((${o})\\.?|(${o})?\\.(${o}))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\b`,
            },
            { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
            { begin: `\\b0[xX](${o})[lL]?\\b` },
            {
              begin: "\\b0(_*[0-7])*[lL]?\\b",
            },
            { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" },
          ],
          relevance: 0,
        };
      return {
        name: "Apex",
        aliases: ["cls", "trigger"],
        case_insensitive: !0,
        disableAutodetect: !0,
        keywords: r,
        illegal: /<\/|#/,
        contains: [
          a.COMMENT("/\\*\\*", "\\*/", {
            relevance: 0,
            contains: [
              { begin: /\w+@/, relevance: 0 },
              { className: "doctag", begin: "@[A-Za-z]+" },
            ],
          }),
          { className: "type", beginKeywords: "list map set", end: "<", excludeEnd: !0 },
          {
            begin: /import apex\.[a-z]+\./,
            keywords: "import",
            relevance: 2,
          },
          a.C_LINE_COMMENT_MODE,
          a.C_BLOCK_COMMENT_MODE,
          { begin: /"""/, end: /"""/, className: "string", contains: [a.BACKSLASH_ESCAPE] },
          a.APOS_STRING_MODE,
          a.QUOTE_STRING_MODE,
          {
            match: [/\b(?:class|trigger|interface|enum|extends|implements|new)/, /\s+/, n],
            className: { 1: "keyword", 3: "title.class" },
          },
          { match: /non-sealed/, scope: "keyword" },
          {
            begin: [s.concat(/(?!else)/, n), /\s+/, n, /\s+/, /=/],
            className: { 1: "type", 3: "variable", 5: "operator" },
          },
          { begin: [/record/, /\s+/, n], className: { 1: "keyword", 3: "title.class" }, contains: [c, a.C_LINE_COMMENT_MODE, a.C_BLOCK_COMMENT_MODE] },
          {
            beginKeywords: "new throw return else",
            relevance: 0,
          },
          {
            begin: ["(?:" + t + "\\s+)", a.UNDERSCORE_IDENT_RE, /\s*(?=\()/],
            className: {
              2: "title.function",
            },
            keywords: r,
            contains: [
              { className: "params", begin: /\(/, end: /\)/, keywords: r, relevance: 0, contains: [i, a.APOS_STRING_MODE, a.QUOTE_STRING_MODE, b, a.C_BLOCK_COMMENT_MODE] },
              a.C_LINE_COMMENT_MODE,
              a.C_BLOCK_COMMENT_MODE,
            ],
          },
          b,
          i,
        ],
      };
    };
  })();
  hljs.registerLanguage("apex", e);
})();
