/*! `apex` grammar compiled for Highlight.js 11.5.0 */
(() => {
  var e = (() => {
    "use strict";
    function e(t, n, a) {
      return -1 === a ? "" : t.replace(n, (s) => e(t, n, a - 1));
    }
    return (t) => {
      const n = t.regex,
        a = "[\xc0-\u02b8a-zA-Z_$][\xc0-\u02b8a-zA-Z_$0-9]*",
        s = a + e("(?:<" + a + "~~~(?:\\s*,\\s*" + a + "~~~)*>)?", /~~~/g, 2),
        r = {
          keyword: [
            "abstract",
            "assert",
            "break",
            "case",
            "catch",
            "continue",
            "default",
            "do",
            "else",
            "enum",
            "exports",
            "final",
            "finally",
            "for",
            "global|10",
            "if",
            "import",
            "instanceof",
            "module",
            "package",
            "private",
            "protected",
            "public",
            "requires",
            "static",
            "switch",
            "throws",
            "transient",
            "try",
            "var",
            "virtual",
            "void",
            "while",
          ],
          literal: ["false", "true", "null"],
          type: [
            "string",
            "boolean",
            "long",
            "float",
            "integer",
            "byte",
            "short",
            "double",
            "blob",
            "date",
            "datetime",
            "decimal",
            "id",
            "object",
            "sobject",
            "time",
            "anytype",
            "currency",
            "void",
            "list",
            "set",
            "map",
          ],
          attribute: ["with sharing|20", "without sharing|20", "inherited sharing|20"],
          title: [
            "ApexPages",
            "AppLauncher",
            "Approval",
            "Auth",
            "Cache",
            "Canvas",
            "ChatterAnswers",
            "CommercePayments",
            "ConnectApi",
            "Database",
            "Datacloud",
            "DataSource",
            "Dom",
            "EventBus",
            "Flow",
            "Functions",
            "KbManagement",
            "LxScheduler",
            "Messaging",
            "Metadata",
            "Pref_center",
            "Process",
            "QuickAction",
            "Reports",
            "Schema",
            "Search",
            "Sfc",
            "Sfdc_Checkout",
            "sfdc_surveys",
            "Site",
            "Support",
            "System",
            "TerritoryMgmt",
            "Test",
            "TxnSecurity",
            "Type",
            "UserProvisioning",
            "VisualEditor",
            "Wave",
          ],
          built_in: ["super", "this", "trigger", "class", "insert", "update", "upsert|30", "delete", "undelete", "merge"],
        },
        i = {
          scope: "meta",
          begin: "@" + a,
          contains: [{ begin: /\(/, end: /\)/, contains: ["self"] }],
        },
        o = {
          scope: "params",
          begin: /\(/,
          end: /\)/,
          keywords: r,
          relevance: 0,
          contains: [t.C_BLOCK_COMMENT_MODE],
          endsParent: !0,
        },
        c = "\\.([0-9](_?[0-9])*)",
        l = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",
        b = {
          className: "number",
          variants: [
            {
              begin: `(\\b(${l})((${c})|\\.)?|(${c}))[eE][+-]?([0-9](_?[0-9])*)\\b`,
            },
            {
              begin: `\\b(${l})\\b((${c})\\b|\\.)?|(${c})\\b`,
            },
            {
              begin: "\\b(0|[1-9](_?[0-9])*)n\\b",
            },
            {
              begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b",
            },
            {
              begin: "\\b0[bB][0-1](_?[0-1])*n?\\b",
            },
            { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
            {
              begin: "\\b0[0-7]+n?\\b",
            },
          ],
          relevance: 0,
        };
      return {
        name: "Apex",
        aliases: ["apex"],
        case_insensitive: !0,
        disableAutodetect: !1,
        keywords: r,
        illegal: /<\/|#/,
        contains: [
          t.COMMENT("/\\*\\*", "\\*/", {
            relevance: 0,
            contains: [
              {
                begin: /\w+@/,
                relevance: 0,
              },
              { scope: "doctag", begin: "@[A-Za-z]+" },
            ],
          }),
          {
            scope: "type",
            beginKeywords: "list map set",
            end: "<",
            excludeEnd: !0,
          },
          {
            begin: /import apex\.[a-z]+\./,
            keywords: "import",
            relevance: 2,
          },
          t.C_LINE_COMMENT_MODE,
          t.C_BLOCK_COMMENT_MODE,
          {
            begin: /"""/,
            end: /"""/,
            scope: "string",
            contains: [t.BACKSLASH_ESCAPE],
          },
          t.APOS_STRING_MODE,
          t.QUOTE_STRING_MODE,
          {
            match: [/\b(?:class|trigger|interface|enum|extends|implements|new)/, /\s+/, a],
            scope: { 1: "keyword", 3: "title.class" },
          },
          { match: /non-sealed/, scope: "keyword" },
          {
            begin: [n.concat(/(?!else)/, a), /\s+/, a, /\s+/, /=/],
            scope: {
              1: "type",
              3: "variable",
              5: "operator",
            },
          },
          {
            begin: [/record/, /\s+/, a],
            scope: { 1: "keyword", 3: "title.class" },
            contains: [o, t.C_LINE_COMMENT_MODE, t.C_BLOCK_COMMENT_MODE],
          },
          {
            beginKeywords: "new throw return else",
            relevance: 2,
          },
          {
            begin: ["(?:" + s + "\\s+)", t.UNDERSCORE_IDENT_RE, /\s*(?=\()/],
            scope: {
              2: "title.function",
            },
            keywords: r,
            contains: [
              {
                scope: "params",
                begin: /\(/,
                end: /\)/,
                keywords: r,
                relevance: 0,
                contains: [i, t.APOS_STRING_MODE, t.QUOTE_STRING_MODE, b, t.C_BLOCK_COMMENT_MODE],
              },
              t.C_LINE_COMMENT_MODE,
              t.C_BLOCK_COMMENT_MODE,
            ],
          },
          b,
          i,
        ],
      };
    };
  })();
  hljs.registerLanguage("apex", e);
})();
